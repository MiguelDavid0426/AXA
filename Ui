#### Librerias ####
install.packages("readxl")
library(readxl)
install.packages("echarts4r")
library(echarts4r)
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shiny")
library(shiny)
install.packages("tidyverse")
library(tidyverse)
install.packages("jsonlite")
library(jsonlite)
library(lubridate)

#### Datos ####
setwd("C:/Users/Home/Downloads")
T_Mortalidad <- read_excel("Tabla_mortalidad.xlsx",sheet = "Tabla ano")
Descuento_K1 <- read_excel("Tabla_mortalidad.xlsx", sheet = "K1_amparo_basico_VIM2")

#### Variables seguro generico ####
#Edad=23 #### Edad actuarial del asegurado 
{n=5  #### Periodo de cobertura en años
N=1    #### Número de primas a pagar
#Sexo= "F" #### Masculino o Femenino
Sexo_SG= "Femenino"
interes=0.03 #### Interes que se maneja 
Monto_Asegurado= 10000000 #### Suma por la cual se asegura 
ano_T=9803
mitad=0
Fecha_I_Seguro="2019/03/29"
Fecha_N="1996/04/26"

Fecha_corte=2019

Edad=Edad_SG(Fecha_I_Seguro,Fecha_N)
#### Primas ####
Prima=A_x_n_SG(Edad,n,Sexo,ano_T,mitad,Monto_Asegurado,interes)/a_x_SG(Edad,N,Sexo,interes,ano_T,mitad,"Anticipado")
Primas=c(rep(Prima,N),rep(0,n-N))
S_Generico(Edad,n,N,Sexo,interes,ano_T,mitad,Monto_Asegurado,Primas,Fecha_corte,Fecha_I_Seguro)}

Sexo_SG="Masculino"
ano_T_SG="1984-1988"
mitad_SG="Si"
# Sexo=as.character(ifelse(Sexo_SG=="Masculino","M","F"))
# ano_T=as.numeric(ifelse(ano_T_SG=="1984-1988","8488","9803"))
# mitad=as.numeric(ifelse(mitad_SG=="Si",1,0))



######################################## Funciones para seguro generico ########################################

#### Función que saca una tabla con los respectivos valores de px, qx, v y edad, de acuerdo a ciertos parametros ####
PQX_SG=function(Edad,n,Sexo,ano_T,mitad){
  Edades=seq(Edad,Edad+n-1,1)
  if(ano_T==9803){
    if(mitad==1){
      if(Sexo=="M"){
        qx <- T_Mortalidad$qx_H2[T_Mortalidad$Edad_x%in%Edades] 
      }else{ 
        qx <- T_Mortalidad$qx_M2[T_Mortalidad$Edad_x%in%Edades]}
    }else{
      if(Sexo=="M"){
        qx <- T_Mortalidad$qx_H[T_Mortalidad$Edad_x%in%Edades]
      }else{
        qx <- T_Mortalidad$qx_M[T_Mortalidad$Edad_x%in%Edades]}}
  }else{
    if(mitad==1){
      qx <- T_Mortalidad$qx2[T_Mortalidad$Edad_x%in%Edades]
    }else{
      qx <- T_Mortalidad$qx[T_Mortalidad$Edad_x%in%Edades]}
  }
  px=c(1,1-qx[-n]) 
  npx <- cumprod(px)
  data.frame(Edades,px,qx,npx)
}
PQX_SG(Edad,n,Sexo,ano_T,mitad)
  
#### Esta función calcula la prima simple neta de un seguro con duración "n", para una persona de edad "Edad",  #### 
#### Sexo= Masculino "M" or Femenino "F", con cierto interes ####
A_x_n_SG=function(Edad,n,Sexo,ano_T,mitad,Monto_Asegurado,interes){
  Datos_Iniciales=PQX_SG(Edad,n,Sexo,ano_T,mitad)
  v <- 1/(1+interes)^((1:n)-ifelse(mitad==1,0.5,0))
  Ax=Monto_Asegurado*sum(v*Datos_Iniciales$npx*Datos_Iniciales$qx);Ax
}
A_x_n_SG(Edad,n,Sexo,ano_T,mitad,Monto_Asegurado,interes)
  
#### Esta función calcula una renta con interes anticipado o vencido a N periodos, para los pagos de las primas ####
a_x_SG=function(Edad,N,Sexo,interes,ano_T,mitad,Tipo){
  Tip=ifelse(Tipo=="Anticipado",0,1)
  Tabla=PQX_SG(Edad,N+Tip,Sexo,ano_T,mitad)
  v=1/(1+interes)^((0+Tip):(N-1+Tip))
  npx=if(Tip==0){
    Tabla$npx}else{
      Tabla$npx[-1]
    }
  sum(v*npx)
}
a_x_SG(Edad,N,Sexo,interes,ano_T,mitad,"Vencido")
a_x_SG(Edad,N,Sexo,interes,ano_T,mitad,"Anticipado")

#### Esta función calcula el tiempo de duración de un seguro que tiene como prima unica ####
#### la reserva, esto para saber cuanto le durá el seguro de acuerdo al ahorro que la persona tenga   
Duracion_SG<-function(comienzo,Sexo,interes,ano_T,mitad,Ahorro,Monto_Asegurado){
  A=rep(0,95-comienzo) 
  i <- 1
  while (i <= (95-comienzo))
  {
    A[i]=A_x_n_SG(Edad=comienzo,n=i,Sexo,ano_T,mitad,Monto_Asegurado,interes)
    i <- i + 1 
  }
  for(l in 1:(94-comienzo)){
    if(A[l]<=Ahorro & A[l+1]>=Ahorro){
      ano=l
    }
  }
  anoss=ifelse(A[1]>Ahorro,0,ano)
  dias=((Ahorro-ifelse(anoss==0,0,A[anoss]))/(A[anoss+1]-ifelse(anoss==0,0,A[anoss])))*360
  dias[is.na(dias)]<-0
  Meses=trunc(dias/30)
  Dias=dias-Meses*30
  anos_Vencidos=trunc(Meses/12)
  meses_Vencidos=Meses-anos_Vencidos*12
  Tiempo=(ifelse((dias+anoss)>0,paste("El seguro durará",anoss,"Años,",Meses,"meses y",round(Dias,2),"días"),
               paste("El seguro ya se vencio hace",-anos_Vencidos,"Años,",-meses_Vencidos,"meses y",round(-Dias,2),"días")))
 Total_Cubri=ifelse((dias+anoss)>0,(anoss*360+Meses*30+Dias),-(-anos_Vencidos*360-meses_Vencidos*30-Dias))
 list(Tiempo,Total_Cubri)
  }
Duracion_SG(comienzo,Sexo,interes,ano_T,mitad,Ahorro,Monto_Asegurado)

#### Esta función calcula el flujo que requiere IFRS17
Flujo_SG<-function(Edad,n,Sexo,ano_T,mitad,inicio,fin,Monto_Asegurado){
  Tabla=PQX_SG(Edad,n,Sexo,ano_T,mitad)
  qx=Tabla$qx[inicio:fin]
  npx=cumprod(c(1,(Tabla$px[(inicio):fin])[-1]))
  flujo=npx*qx*Monto_Asegurado;flujo
}
Flujo_SG(Edad,n,Sexo,ano_T,mitad,inicio,fin,Monto_Asegurado)

#### Calcula la edad de la persona según las fechas ####
Cuantos_Edad<-function(Fecha_I_Seguro,Fecha_N){
  fecha1=ymd(Fecha_I_Seguro) #### Inicio seguro
  fecha0=ymd(Fecha_N)#### Fecha nacimiento
  Edad=as.numeric(round((ymd(fecha1)-ymd(fecha0))/365,0))
  Edad
}
Edad=Cuantos_Edad(Fecha_I_Seguro,Fecha_N)

#### Esta función da como resultado una tabla con los valores mas importantes y el tiempo estimado que durará ####
#### el seguro con la reserva que se tiene, teniendo en cuenta el monto asegurado y los demas parametros
S_Generico=function(Edad,n,N,Sexo_SG,interes,ano_T,mitad,Monto_Asegurado,Primas,Fecha_corte,Fecha_I_Seguro){
  Sexo=as.character(ifelse(Sexo_SG=="Masculino","M","F"))
  #ano_T=as.numeric(ifelse(ano_T_SG=="1984-1988","8488","9803"))
  #mitad=as.numeric(ifelse(mitad_SG=="Si",1,0))
  Tabla=PQX_SG(Edad,n,Sexo,ano_T,mitad)
  Ax=rep(0,n)
  i <- 1
  while (i <= n)
  {
    Ax[i]=A_x_n_SG(Edad+i-1,n=1,Sexo,ano_T,mitad,Monto_Asegurado,interes)
    i <- i + 1 
  }
  Diferencia=Primas-Ax
  nEx=c(rep(1/(1+interes)^1,n-1)*Tabla$px[-1],1)  #### El último es 1¿?
  Saldo=rep(0,n)
  i <- 1
  while (i <= n)
  {
    Saldo[i]=ifelse(i==1,Diferencia[1]/nEx[1],(Saldo[i-1]+Diferencia[i])/nEx[i])
    i <- i + 1 
  }
  Duracion=rep(0,n)
  j <- 1
  while (j <= n)
  {
    comienzo=c(Tabla$Edades,Tabla$Edades[n]+1)[j+1]
    Ahorro=Saldo[j]
    Duracion[j]=Duracion_SG(comienzo,Sexo,interes,ano_T,mitad,Ahorro,Monto_Asegurado)[1]
    j <- j + 1 
  }
  Tiempo_Duracion=unlist(Duracion)
  z=c(0:n)
  Anoo=seq(year(ymd(Fecha_I_Seguro)),year(ymd(Fecha_I_Seguro))+n)
  A=c(Tabla$Edades,Tabla$Edades[n]+1)
  B=c(round(Primas,4),0)
  C=c(round(Ax,4),0)
  D=c(0,round(Saldo,4))
  E=c(0,Tiempo_Duracion)
  inicio=which(Anoo==as.numeric(Fecha_corte))
  fin=ifelse(Saldo[n]>=0,n,which(Saldo<10)[1])
  lujo=unlist(ifelse(inicio<=fin,list(Flujo_SG(Edad,n,Sexo,ano_T,mitad,inicio,fin,Monto_Asegurado)),list(0)))
  flujo=c(rep(0,inicio-1),lujo,rep(0,1+(n-(length(lujo)+inicio-1))))
  Tabla1=data.frame(z,Anoo,A,B,C,flujo,D,E)
  colnames(Tabla1)=c("n","Año","Edad","Primas (BOY)","Ax anual (BOY)","Flujo (EOY)","Reserva retrospectiva (BOY)","Seguro prorrogado (BOY)")
  Tabla1
}
S_Generico(Edad,n,N,Sexo,interes,ano_T,mitad,Monto_Asegurado,Primas,Fecha_corte,Fecha_I_Seguro)
  
#### Criterios para definir número de primas y tiempo de cobertura
Tiempo_cober<-function(Edad){
  if(Edad>=76){
    p=list(5)
  }else{
    if(Edad<=75 & Edad>=66){
      p=list(5,10)
    }else{
      if(Edad<=65 & Edad>=56 ){
        p=list(5,10,20)
      }else{
        if(Edad<=55){
          p=list(5,10,20,30)
        }
      }
    }
  }
  p
}
numero_prima<-function(n_sup){
  if(n_sup==5){
    p=list(1,2)
  }else{
    if(n_sup==10){
      p=list(1,2,6)
    }else{
      p=list(1,2,6,10)
    }
  }
  p
}



######################################## Seguro VIM 2 ########################################

#### Variables seguro generico ####


{n=5  #### Periodo de cobertura en años
N=2   #### Número de primas a pagar
Sexo= "M" #### Masculino o Femenino
Sexo_VIM2= "Femenino"
interes=0.03 #### Interes que se maneja 
Monto_Asegurado= 10000000 #### Suma por la cual se asegura 
Fecha_I_Seguro="2019/03/29"
Fecha_N="1956/04/26"
Fecha_corte=2019
Edad=Edad_SG(Fecha_I_Seguro,Fecha_N)
#### Primas ####
K_1=k1_VIM2(Edad,Sexo,N,n)
K_2=k2_VIM2(Monto_Asegurado)
Tabla_Prob1=Ax_VIM2(Edad,Sexo,n,N,interes,Monto_Asegurado,K_1,K_2)

=Tabla_Prob1$Prima
Primas_VIM2=c(rep(Primas_VIM,N),rep(0,n-N))
General_VIM2(Edad,n,N,interes,Sexo_VIM2,Monto_Asegurado,Primas_VIM2,Fecha_corte,Fecha_I_Seguro)}



######################################## Funciones para VIM 2 ########################################
k1_VIM2<- function(Edad,Sexo,N,n){
  as.numeric(filter(Descuento_K1, EDAD%in%Edad)[,paste0(Sexo,"_",N,"_",n)]) 
}
k1_VIM2(Edad,Sexo,N,n)
  
k2_VIM2<- function(Monto_Asegurado){
  Descuento_VA=data.frame("Monto"=c(0,4e+07,4.5e+07,6.5e+07,9e+07,1.2e+08,12e+24),"Descuento"=c(0,0.01,0.04,0.075,0.09,0.11,0.11))
  for(k in 1:6){
    if(Monto_Asegurado>=Descuento_VA[k,1] & Monto_Asegurado<=Descuento_VA[k+1,1]){
      descuento=k
    }
  }
  Descuento_VA$Descuento[descuento]
}
k2_VIM2(Monto_Asegurado)

Ax_VIM2<-function(Edad,Sexo,n,N,interes,Monto_Asegurado,K_1,K_2){
  G_fijos=c(0.002416,rep(0.000944,n-1))   #### Es el porcentaje de gastos fijos de expedición y administración de la póliza del seguro Vida a mi Medida 2 y 3, para el primero y demás años
  G_variables=c(0.1511, rep(0.0974,n-1))   #### es el porcentaje de gastos variables de expedición y administración de la póliza del seguro “Vida a mi Medida 2 y 3, para el primero y demás años
  B=0.1
  Datos=data.frame(PQX_SG(Edad,n,Sexo,ano_T="9803",mitad=1)) 
  T_z= (Datos$qx*1/(1+interes)^(0.5)+G_fijos)/(1-(B+G_variables))
  qTAR=(1-K_1)*(1-K_2)*T_z
  npTAR=c(1,cumprod(1-(1+interes)^0.5*qTAR))[1:n]
  Ax_2=Monto_Asegurado*sum(qTAR*npTAR*1/(1+interes)^(0:(n-1)))
  v=1/(1+interes)^(0:(n-1))
  comi=(0.35+0.25*sum(v[-1]))/sum(v)
  Denominador=sum((1/(1+interes)^(0:(N-1)))*(1-comi)*npTAR[1:N])
  C=Ax_2/Denominador
  list("Edad"=Datos$Edades,"qTAR"=qTAR,"npTAR"=npTAR,"Ax_2"=Ax_2,"Prima"=C,"Comision"=comi)
}
Ax_VIM2(Edad,Sexo,n,N,interes,Monto_Asegurado,K_1,K_2)
  
Duracion_VIM2<-function(comienzo,Sexo,interes,Ahorro,Monto_Asegurado,K_1,K_2){
  A=rep(0,98-comienzo)
  i <- 1
  while (i <= (98-comienzo))
  {
    A[i]=as.numeric(Ax_VIM2(Edad=comienzo,Sexo,n=i,N=1,interes,Monto_Asegurado,K_1,K_2)[4])*(1-as.numeric(Ax_VIM2(Edad=comienzo,Sexo,n=i,N=1,interes,Monto_Asegurado,K_1,K_2)[6]))
    i <- i + 1 
  }
  for(l in 1:(97-comienzo)){
    if(A[l]<=Ahorro & A[l+1]>=Ahorro){
      ano_duracion=l
    }
  }
  anoss=ifelse(A[1]>Ahorro,0,ano_duracion)
  dias=((Ahorro-ifelse(anoss==0,0,A[anoss]))/(A[anoss+1]-ifelse(anoss==0,0,A[anoss])))*360 
  dias[is.na(dias)]<-0
  Meses=trunc(dias/30)
  Dias=dias-Meses*30
  anos_Vencidos=trunc(Meses/12)
  meses_Vencidos=Meses-anos_Vencidos*12
  Tiempo=(ifelse((dias+anoss)>0,paste("El seguro durará",anoss,"Años,",Meses,"meses y",round(Dias,2),"días"),
                 paste("El seguro ya se vencio hace",-anos_Vencidos,"Años,",-meses_Vencidos,"meses y",round(-Dias,2),"días")))
  Total_Cubri=ifelse((dias+anoss)>0,(anoss*360+Meses*30+Dias),-(-anos_Vencidos*360-meses_Vencidos*30-Dias))
  list(Tiempo,Total_Cubri)
}
Duracion_VIM2(comienzo,Sexo,interes,Ahorro,Monto_Asegurado,K_1,K_2)


Flujo_VIM2<-function(inicio,fin,Sexo,Monto_Asegurado,interes,K_1,K_2){
  datos=Ax_VIM2(Edad=inicio,Sexo,n=fin,N=1,interes,Monto_Asegurado,K_1,K_2)
  qx=datos$qTAR
  npx=datos$npTAR
  flujo=npx*qx*Monto_Asegurado;flujo
}
Flujo_VIM2(inicio,fin,Sexo,Monto_Asegurado,interes,K_1,K_2)

General_VIM2<-function(Edad,n,N,interes,Sexo_VIM2,Monto_Asegurado,Primas_VIM2,Fecha_corte,Fecha_I_Seguro){
  Sexo=as.character(ifelse(Sexo_VIM2=="Masculino","M","F"))
  K_1=k1_VIM2(Edad,Sexo,N,n)
  K_2=k2_VIM2(Monto_Asegurado)
  datos=Ax_VIM2(Edad,Sexo,n,N,interes,Monto_Asegurado,K_1,K_2)
  qTAR=datos$qTAR
  comi=datos$Comision
  segundo=Primas_VIM2*(1-comi)
  tercero=Monto_Asegurado*qTAR
  Denominador=1-(1+interes)^(0.5)*qTAR
  Reserva=rep(0,n)
  i <- 1
  while (i <= n)
  {
    Reserva[i]=ifelse(i==1,(segundo[1]-tercero[1])/Denominador[1],(Reserva[i-1]*(1+interes)+segundo[i]-tercero[i])/Denominador[i])
    i <- i + 1 
  }
  Duracion=rep(0,n)
  j <- 1
  while (j <= n)
  {
    comienzo=datos$Edad[j]
    Ahorro=Reserva[j]
    Duracion[j]=Duracion_VIM2(comienzo,Sexo,interes,Ahorro,Monto_Asegurado,K_1,K_2)[1]
    j <- j + 1 
  }
  Tiempo_Duracion=unlist(Duracion)
  Anoo=seq(year(ymd(Fecha_I_Seguro)),year(ymd(Fecha_I_Seguro))+n)
  inicio=datos$Edad[which(Anoo==as.numeric(Fecha_corte))]
  fin=datos$Edad[which(Reserva<10)[1]]-inicio+1
  lujo=Flujo_VIM2(inicio,fin,Sexo,Monto_Asegurado,interes,K_1,K_2)
  Flujo=c(rep(0,which(datos$Edad==inicio)-1),lujo,rep(0,1+(n-(length(lujo)+which(datos$Edad==inicio)-1))))
  z=c(0:n)
  A=c(datos$Edad,datos$Edad[n]+1)
  B=c(round(Primas_VIM2,4),0)
  D=c(0,round(Reserva,2))
  E=c(0,Tiempo_Duracion)
  C=c(round(qTAR,4),0)
  Tabla1=data.frame(z,Anoo,A,B,C,Flujo,D,E)
  colnames(Tabla1)=c("n","Año","Edad","Primas (BOY)","TAR qx","Flujo (EOY)","Reserva retrospectiva (BOY)","Seguro prorrogado (BOY)")
  Tabla1
}
General_VIM2(Edad,n,N,interes,Sexo_VIM2,Monto_Asegurado,Primas_VIM2,Fecha_corte,Fecha_I_Seguro)

  ui <- dashboardPage (
  dashboardHeader(title="AXA Colpatria"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Introducción", tabName = "Introduccion", icon = icon("ambulance")),
      menuItem("Seguro generico", tabName = "Seguro_generico", icon = icon("american-sign-language-interpreting")),
      menuItem("VIM 2", tabName = "VIM_2", icon = icon("american-sign-language-interpreting"))
    )
  ),
  dashboardBody(
    tabItems(
      #############################     Introducción     #############################
      tabItem(tabName = "Introduccion",
              h1("Trabajo de grado",align="center",style="color:red"),
              br(),
              h3("")
      ),
      #############################     Seguro generico     #############################     
      tabItem(tabName = "Seguro_generico",
              fluidRow(
                h3("Este es un seguro generico, según la teoria, sirve para calcular la prima de riesgo de un seguro de vida temporal con pago de primas limitado, de acurerdo a los siguientes parámetros",align="center",style="color:black"),
                box(title="Datos del asegurado", status="primary", width = 4, collapsed = T,
                    solidHeader = T, collapsible = T,
                    dateInput("Fecha0_SG", "Fecha de nacimiento:", value ="1996-04-26", format = "yyyy/mm/dd"),
                    dateInput("Fecha1_SG", "Fecha inicio del seguro:", value = "2019-03-29", format = "yyyy/mm/dd"),
                    h4("La edad actuarial del asegurado es:",align="center",style="color:black"),
                    h3(textOutput("F_edad_SG"),align="center",style="color:black"),
                    uiOutput("Tiempo_cober_SG"),
                    selectInput("Sexo_SG","Genero del asegurado",c("Femenino","Masculino")),
                    numericInput("Monto_Asegurado_SG",label="Valor asegurado (millones)", value=10, min=0, max=100000, step <- 1),
                    h4("La fecha de finalización del seguro es:",align="center",style="color:black"),
                    h3(textOutput("Fecha2_SG"),align="center",style="color:black")
                ),
                box(title="Parámetros", status="primary", width = 4, collapsed = T,
                    solidHeader = T, collapsible = T,
                    numericInput("interes_SG",label="Tasa de interes", value=0.03,min=0,max=4, step <- 0.001),
                    selectInput("ano_T_SG", label = "Tablas de mortalidad Colombianas", c("1984-1988","1998-2003")),
                    selectInput("mitad_SG","¿Probabilidad a mitad de año?",c("Si","No")),
                    uiOutput("numero_prima_SG"),
                    h4("El valor de la prima anual es:",align="center",style="color:black"),
                    h3(textOutput("Valor_SG"),align="center",style="color:black"),
                    numericInput("Fecha_corte_SG",label="Fecha de corte:", value=2019,min=1900,max=2050, step <- 1)
                    #verbatimTextOutput("Primas")
                ),
                box(title="Primas seguro generico", status="primary", width = 4,collapsed = T,
                    solidHeader = T, collapsible = T,align = "center",
                    h4("Insertar algún valor, y con separador de decimal como punto"),
                    uiOutput("Primas_Panel_SG")
                ),
                box(
                  title="Datos importantes sobre el seguro", status="info",width = 12, collapsed = T,
                  solidHeader = T, collapsible = T,
                  tableOutput("Datos_SG")
                ),
                box(
                  title="Resultados visuales", status="info",width = 12, collapsed = T,
                  solidHeader = T, collapsible = T,
                  echarts4rOutput("plot1_SG")
                )
              )
      ),
      #############################     Seguro VIM 2     #############################     
      tabItem(tabName = "VIM_2",
              fluidRow(
                h3("Este es un seguro de vida de la compañia AXA Colpatria",align="center",style="color:black"),
                box(title="Datos del asegurado", status="primary", width = 4, collapsed = T,
                    solidHeader = T, collapsible = T,
                    dateInput("Fecha0_VIM2", "Fecha de nacimiento:", value ="1996-04-26", format = "yyyy/mm/dd"),
                    dateInput("Fecha1_VIM2", "Fecha inicio del seguro:", value = "2019-03-29", format = "yyyy/mm/dd"),
                    h4("La edad actuarial del asegurado es:",align="center",style="color:black"),
                    h3(textOutput("F_edad_VIM2"),align="center",style="color:black"),
                    uiOutput("Tiempo_cober_VIM2"),
                    selectInput("Sexo_VIM2","Genero del asegurado",c("Femenino","Masculino")),
                    numericInput("Monto_Asegurado_VIM2",label="Valor asegurado (millones)", value=10, min=0, max=100000, step <- 1),
                    h4("La fecha de finalización del seguro es:",align="center",style="color:black"),
                    h3(textOutput("Fecha2_VIM2"),align="center",style="color:black")
                ),
                
                box(title="Parámetros", status="primary", width = 4, collapsed = T,
                    solidHeader = T, collapsible = T,
                    numericInput("interes_VIM2",label="Tasa de interes", value=0.03,min=0,max=4, step <- 0.001),
                    uiOutput("numero_prima_VIM2"),
                    h4("El valor de la prima anual es:",align="center",style="color:black"),
                    h3(textOutput("Valor_VIM2"),align="center",style="color:black"),
                    numericInput("Fecha_corte_VIM2",label="Fecha de corte:", value=2019,min=1900,max=2050, step <- 1)
                ),
                box(title="Primas seguro VIM 2", status="primary", width = 4,collapsed = T,
                    solidHeader = T, collapsible = T,align = "center",
                    h4("Insertar algún valor, y con separador de decimal como punto"),
                    uiOutput("Primas_Panel_VIM2")
                ),
                box(
                  title="Datos importantes sobre el seguro", status="info",width = 12, collapsed = T,
                  solidHeader = T, collapsible = T,
                  tableOutput("Datos_VIM2")
                ),
                box(
                  title="Resultados visuales", status="info",width = 12, collapsed = T,
                  solidHeader = T, collapsible = T,
                  echarts4rOutput("plot1_VIM2")
                )
              )
      ) 
    )
  )
)
server <- function(input, output) {
  #############################     Función seguro generico     #############################  
  #### Esta parte calcula la edad del asegurado ####
  Fecha_edad_SG <- reactive({
    Fecha_I_Seguro1=input$Fecha1_SG #### Inicio seguro
    Fecha_N1=input$Fecha0_SG #### Fecha nacimiento    
    Cuantos_Edad(Fecha_I_Seguro1,Fecha_N1)
  })
  output$F_edad_SG<- renderText({
    Fecha_edad_SG()
  })
  
  #### De acuerdo a la edad, calcula los posibles tiempos de cobertura del seguro ####
  output$Tiempo_cober_SG<-renderUI(
    selectInput(inputId="n_SG", label ="Tiempo de cobertura (años)", unlist(Tiempo_cober(Fecha_edad_SG())))
  )

  #### Calcula la fecha de finalización del seguro ####
  output$Fecha2_SG<- renderText({
    fecha1=input$Fecha1_SG
    fecha_fin_SG=as.character(paste0(day(fecha1),"/",month(fecha1),"/",as.numeric(year(fecha1))+as.numeric(input$n_SG)))
    fecha_fin_SG
  })
  
  #### Calcula el número de primas según el tiempo de cobertura ####
  output$numero_prima_SG<-renderUI(
    selectInput(inputId="N_SG", label = "Número de primas", unlist(numero_prima(as.numeric(input$n_SG))))
  )
  #### Valor de la prima según los parámetros ####
  Primas_Panel_S <- reactive({
    Edad1_SG=as.numeric(Fecha_edad_SG())
    n1_SG=as.numeric(input$n_SG)
    N1_SG=as.numeric(input$N_SG)
    Sexo1_SG=as.character(ifelse(input$Sexo_SG=="Masculino","M","F"))
    ano_T1_SG=as.numeric(ifelse(input$ano_T_SG=="1984-1988","8488","9803"))
    mitad1_SG=as.numeric(ifelse(input$mitad_SG=="Si",1,0))
    interes1_SG=as.numeric(input$interes_SG)
    Monto_Asegurado1_SG=as.numeric(input$Monto_Asegurado_SG)*1000000
    Prima1_SG=format(A_x_n_SG(Edad1_SG,n1_SG,Sexo1_SG,ano_T1_SG,mitad1_SG,Monto_Asegurado1_SG,interes1_SG)/a_x_SG(Edad1_SG,N1_SG,Sexo1_SG,interes1_SG,ano_T1_SG,mitad1_SG,"Anticipado"), scientific = F)
    Prima1_SG[1]
  })
  output$Valor_SG<-renderText({
    Primas_Panel_S()
  })
  ### Cosas a mostrar ####
  # output$Primas<-renderPrint(
  #   #class(Fecha_edad_SG())
  #    #input$mitad_SG
  #    as.numeric(ifelse(input$ano_T_SG=="1984-1988","8488","9803"))
  #    #mitad=as.numeric(ifelse(input$mitad_SG=="Si",1,0))
  # )
  

  #### Introducir las primas ####
  output$Primas_Panel_SG <- renderUI({ 
    lapply(1:input$N_SG, function(i) {
      column(8,
             numericInput(inputId=paste0("Prima_",i,"SG"),label=paste("Prima",i), value=Primas_Panel_S())
      )
    })
  })
  #### Valor de prima que se introduce ####
  pagos_SG <- reactive({
    xx = map(
      .x = 1:input$N_SG,
      ~ input[[paste0("Prima_",.x,"SG")]]
    )
  })
  
  #### Función que calcula todo ####
  Tabla_SG<-reactive({
    Edad2_SG=as.numeric(Fecha_edad_SG())
    n2_SG=as.numeric(input$n_SG)
    N2_SG=as.numeric(input$N_SG)
    Sexo2_SG=input$Sexo_SG
    ano_T2_SG=as.numeric(ifelse(input$ano_T_SG=="1984-1988","8488","9803"))
    mitad2_SG=as.numeric(ifelse(input$mitad_SG=="Si",1,0))
    interes2_SG=as.numeric(input$interes_SG)
    Monto_Asegurado2_SG=as.numeric(input$Monto_Asegurado_SG)*1000000
    Pago2_SG=unlist(pagos_SG())
    Primas2_SG=c(Pago2_SG,rep(0,n2_SG-N2_SG))
    Fecha_I_Seguro2=input$Fecha1_SG
    Fecha_corte2=input$Fecha_corte_SG
    S_Generico(Edad2_SG,n2_SG,N2_SG,Sexo2_SG,interes2_SG,ano_T2_SG,mitad2_SG,Monto_Asegurado2_SG,Primas2_SG,Fecha_corte2,Fecha_I_Seguro2)
  })  
  
  #############################     Datos a mostrar seguro generico     #############################      
  output$Datos_SG<-renderTable({
    Datos_S=Tabla_SG()
    #Datos_S[,c(1,2)]=round(Datos_S[,c(1,2)],0)
    Datos_S[,c(3:7)]=format(round(Datos_S[,c(3:7)],0), big.mark = ",", scientific = F,trim=T)
    Datos_S
  })
  #############################     Grafica seguro generico     #############################  
  output$plot1_SG<-renderEcharts4r({
    Datos_SG=data.frame(Tabla_SG())
    df<-Datos_SG
    list(
      "title"=list(
        "text"='Seguro Generico',
        "textStyle"=list(
          "color"='blue',
          "fontStyle"='italic'
        ),
        "subtext"='Variación con respecto al tiempo',
        "subtextStyle"=list(
          "color"='Black',
          "fontStyle"='oblique'
        )
      ),
      "xAxis" = list(
        "type" = "category",
        "data" = paste(df$Edad,"años"),
        "name"= "Edad actuarial",
        "nameLocation"='middle',
        "nameGap"=30,
        "nameTextStyle"=list(
          "color"="black",
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=18
        )
      ),
      "yAxis" = list(
        "type" = "value",
        "name"= "Valor",
        "nameLocation"='middle',
        "nameGap"=60,
        "nameTextStyle"=list(
          "color"="black",
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=18
        )
      ),
      "legend"=list(
        "show"='true',
        "type"='scroll',
        "left" = '75%',
        "orient" = 'vertical',
        "top"='middle',
        "bottom"=  '20%',
        "align"='right',
        "inactiveColor"= '# 2f4554',
        "textStyle"=list(
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=14
        )
      ),
      "dataZoom"=list(
        "type"= 'slider'
      ),
      "tooltip"=list(
        "trigger"="axis",
        "axisPointer"=list(
          "type"= 'cross'
        ) 
      ),
      "series" = list(
        list(
          "name"='Primas pagadas',
          "data" = df$Primas..BOY.,
          "type" = 'bar',
          "barWidth"='40%'
          #"color"= 'blue'
        ),
        list(
          "name"='Valor reserva retrospectiva',
          "data" = df$Reserva.retrospectiva..BOY.,
          "type" = 'line',
          "lineStyle"=list(
            #"color"='rgb(128, 128, 128)',
            "width"='4.5',
            "type"='dotted'
          )
        ),
        list(
          "name"='Flujo futuro',
          "data" = df$Flujo..EOY.,
          "type" = 'line',
          "areaStyle"=list(
           
          )
        )
      )
    ) %>% 
      toJSON(pretty = T,auto_unbox = T) %>% 
      echarts_from_json()
  })
  
  

  
  
  #############################     Función seguro VIM2     #############################  
  #### Esta parte calcula la edad del asegurado ####
  Fecha_edad_VIM2 <- reactive({
    Fecha_I_Seguro3=input$Fecha1_VIM2 #### Inicio seguro
    Fecha_N3=input$Fecha0_VIM2 #### Fecha nacimiento    
    Cuantos_Edad(Fecha_I_Seguro3,Fecha_N3)
  })
  output$F_edad_VIM2<- renderText({
    Fecha_edad_VIM2()
  })
  #### De acuerdo a la edad, calcula los posibles tiempos de cobertura del seguro ####
  output$Tiempo_cober_VIM2<-renderUI(
    selectInput(inputId="n_VIM2", label ="Tiempo de cobertura (años)", unlist(Tiempo_cober(Fecha_edad_VIM2())))
  )
  #### Calcula la fecha de finalización del seguro ####
  output$Fecha2_VIM2<- renderText({
    fecha2=input$Fecha1_VIM2
    fecha_fin_VIM2=as.character(paste0(day(fecha2),"/",month(fecha2),"/",as.numeric(year(fecha2))+as.numeric(input$n_VIM2)))
    fecha_fin_VIM2
  })
  #### Calcula el número de primas según el tiempo de cobertura ####
  output$numero_prima_VIM2<-renderUI(
    selectInput(inputId="N_VIM2", label = "Número de primas", unlist(numero_prima(as.numeric(input$n_VIM2))))
  )
  
  #### Valor de la prima según los parámetros ####
  Primas_Pan_V <- reactive({
    Edad1_VIM2=as.numeric(Fecha_edad_VIM2())
    n1_VIM2=as.numeric(input$n_VIM2)
    N1_VIM2=as.numeric(input$N_VIM2)
    Sexo1_VIM2=as.character(ifelse(input$Sexo_VIM2=="Masculino","M","F"))
    interes1_VIM2=as.numeric(input$interes_VIM2)
    Monto_Asegurado1_VIM2=as.numeric(input$Monto_Asegurado_VIM2)*1000000
    K_11_VIM2=k1_VIM2(Edad1_VIM2,Sexo1_VIM2,N1_VIM2,n1_VIM2)
    K_21_VIM2=k2_VIM2(Monto_Asegurado1_VIM2)
    format(unlist(Ax_VIM2(Edad1_VIM2,Sexo1_VIM2,n1_VIM2,N1_VIM2,interes1_VIM2,Monto_Asegurado1_VIM2,K_11_VIM2,K_21_VIM2)[5]), scientific = F)[1]
    })
  output$Valor_VIM2<- renderText({
    Primas_Pan_V()
  })
  #### Introducir las primas ####
  output$Primas_Panel_VIM2 <- renderUI({ 
    lapply(1:input$N_VIM2, function(i) {
      column(8,
             numericInput(inputId=paste0("Prima_",i,"VIM2"),label=paste("Prima",i), value=Primas_Pan_V())
      )
    })
  })
  #### Valor de prima que se introduce ####
  pagos_VIM2 <- reactive({
    xx = map(
      .x = 1:input$N_VIM2,
      ~ input[[paste0("Prima_",.x,"VIM2")]]
    )
  })
  
  #### Función que calcula todo ####
  Tabla_VIM2<-reactive({
    Edad2_VIM2=as.numeric(Fecha_edad_VIM2())
    n2_VIM2=as.numeric(input$n_VIM2)
    N2_VIM2=as.numeric(input$N_VIM2)
    Sexo2_VIM2=input$Sexo_VIM2
    interes2_VIM2=as.numeric(input$interes_VIM2)
    Monto_Asegurado2_VIM2=as.numeric(input$Monto_Asegurado_VIM2)*1000000
    Pago2_VIM2=unlist(pagos_VIM2())
    Primas2_VIM2=c(Pago2_VIM2,rep(0,n2_VIM2-N2_VIM2))
    Fecha_I_Seguro4=input$Fecha1_VIM2
    Fecha_corte4=input$Fecha_corte_VIM2
    General_VIM2(Edad2_VIM2,n2_VIM2,N2_VIM2,interes2_VIM2,Sexo2_VIM2,Monto_Asegurado2_VIM2,Primas2_VIM2,Fecha_corte4,Fecha_I_Seguro4)
  })  
  
  #############################     Datos a mostrar seguro generico     #############################      
  output$Datos_VIM2<-renderTable({
    Datos_VIM=Tabla_VIM2()
    Datos_VIM[,c(3:7)]=format(round(Datos_VIM[,c(3:7)],0), big.mark = ",", scientific = F,trim=T)
    #Datos_VIM[,c(2:7)]=format(round(Datos_VIM[,c(2:7)],0), big.mark = ",", scientific = F,trim=T)
    Datos_VIM
  })
  #############################     Grafica seguro generico     #############################  
  output$plot1_VIM2<-renderEcharts4r({
    Datos_VIM2=data.frame(Tabla_VIM2())
    df<-Datos_VIM2
    list(
      "title"=list(
        "text"='Seguro VIM2',
        "textStyle"=list(
          "color"='blue',
          "fontStyle"='italic'
        ),
        "subtext"='Variación con respecto al tiempo',
        "subtextStyle"=list(
          "color"='Black',
          "fontStyle"='oblique'
        )
      ),
      "xAxis" = list(
        "type" = "category",
        "data" = paste(df$Edad,"años"),
        "name"= "Edad actuarial",
        "nameLocation"='middle',
        "nameGap"=30,
        "nameTextStyle"=list(
          "color"="black",
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=18
        )
      ),
      "yAxis" = list(
        "type" = "value",
        "name"= "Valor",
        "nameLocation"='middle',
        "nameGap"=60,
        "nameTextStyle"=list(
          "color"="black",
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=18
        )
      ),
      "legend"=list(
        "show"='true',
        "type"='scroll',
        "left" = '75%',
        "orient" = 'vertical',
        "top"='middle',
        "bottom"=  '20%',
        "align"='right',
        "inactiveColor"= '# 2f4554',
        "textStyle"=list(
          "fontStyle"='oblique',
          "fontWeight"='bolder',
          "fontSize"=14
        )
      ),
      "dataZoom"=list(
        "type"= 'slider'
      ),
      "tooltip"=list(
        "trigger"="axis",
        "axisPointer"=list(
          "type"= 'cross'
        ) 
      ),
      "series" = list(
        list(
          "name"='Primas pagadas',
          "data" = df$Primas..BOY.,
          "type" = 'bar',
          "barWidth"='40%'
          #"color"= 'blue'
        ),
        list(
          "name"='Valor reserva retrospectiva',
          "data" = df$Reserva.retrospectiva..BOY.,
          "type" = 'line',
          "lineStyle"=list(
            #"color"='rgb(128, 128, 128)',
            "width"='4.5',
            "type"='dotted'
          )
        ),
        # list(
        #   "name"='A from x to x+1',
        #   "data"=df$Ax.anual..BOY.,
        #   "type"='scatter',
        #   "symbol"='arrow',
        #   #"symbolSize"=c(35,30),
        #   "itemStyle"=list(
        #     "color"= '#32cd32',
        #     "borderType"='dotted'
        #   )
        # ),    
        list(
          "name"='Flujo futuro',
          "data" = df$Flujo..EOY.,
          "type" = 'line',
          "areaStyle"=list(
            #"color"='#ffd700'
          )
          # "lineStyle"=list(
          #   "color"= '#ffd700'
          # )
        )
      )
    ) %>% 
      toJSON(pretty = T,auto_unbox = T) %>% 
      echarts_from_json()
  })
}
shinyApp(ui, server)











